{
  
    
        "post0": {
            "title": "College Board Grading",
            "content": "Submission 1 . Row 1 | 1 | . Row 2 | 1 | . Row 3 | 1 | . Row 4 | 0 | . Row 5 | 1 | . Row 6 | 1 | . Final Score | 5/6 | . 1: They get points because The video demonstrates the running of the program including input, output, and program functionallly. . 2: They get points because it includes two program code segments - one that shows how data has been stored in this list - one that shows the data in this same list being used as part of fulfilling the program’s purpose. . 3: They get points because it includes a program code segment that shows a list being used to manage complexity in the program. ( he explains well on what would happen if sideIndex was not used) . 4: They get no points beacuse The code segment consisting of the procedure is not included in the written responses section. The procedure is a built-in or existing procedure or language structure, such as an event handler or main method. . 5: They get points because The response explains in great detail how the algorithm in the procedure works so it can be recreated. The student-developed algorithm within procedure. . 6: they get points because it describes two calls to the selected procedure identified in written response 3c. Each call must pass a different arguments that causes a different segment of code in the algorithm to execute. describes the conditions being tested by each call to the procedure. . Submission 2 . Row 1 | 1 | . Row 2 | 1 | . Row 3 | 0 | . Row 4 | 1 | . Row 5 | 1 | . Row 6 | 1 | . Final Score | 5/6 | . 1: The video demonstrates the running of the program functionality, output, and Input. Shows clearly how the program works and many different examples. . 2: The written response includes two program code segments: one that shows how data has been stored in this list and one that shows the data in this same list being used as part of fulfilling the program’s purpose. It also identifies the name of the variable representing the list being used in this response. . 3: The explantation does not apply to the selected list and the use of their list is not used in the program. The use of their list does not result in a program that is easier to develop, meaning alternatives presented are equally complex or potentially easier. . 4: The program shows a student-developed procedure Requirements for program code segments with at least one parameter that has an effect on the functionality of the procedure, and one showing where the student-developed procedure is being called. . 5: The response was explained in great detailed steps on how the indentified algorithm works so someone else can recreate it. Also it includes sequencing, selection, and iteration. . 6: The response desribes the condition being tested by each call to the procedure. The response inculdes indentifies the result of each call. .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2023/01/04/gradingcollege.html",
            "relUrl": "/fastpages/markdown/2023/01/04/gradingcollege.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 17-18 Homework",
            "content": "Hack 1 . A decidable problem is a problem for which an algorithm or a procedure can be written that always terminates after a finite number of steps and correctly answers whether a given input to the problem is a valid solution or not. An example of a decidable problem is determining whether a given string of text is a palindrome (a word or phrase that reads the same forwards and backwards). An undecidable problem is a problem for which it is impossible to design an algorithm or a procedure that always terminates and correctly answers whether a given input is a valid solution or not. An example of an undecidable problem is the Halting problem, which is the problem of determining, given a description of an arbitrary computer program and an input, whether the program will finish running or continue to run forever. | . Hack 2 . Answer = None of the above. | . A. 2 x 6 x 8 is a mathematical expression that evaluates to 96, but it is not an algorithm. . B. 4^5 is a mathematical expression that evaluates to 1024, but it is not an algorithm. . C. (3 x 8)^2 is a mathematical expression that evaluates to 144, but it is not an algorithm. . None of these are a three step alogorithm because these answers only take two steps. So none of the above. | . Hack 3 . function peakFinder(array) { let start = 0; let end = array.length - 1; while (start &lt;= end) { let mid = Math.floor((start + end) / 2); if (array[mid] &gt; array[mid-1] &amp;&amp; array[mid] &gt; array[mid+1]) { return The ${mid} indexed number, ${array[mid]} is a peak; } else if (array[mid] &lt; array[mid-1]) { end = mid - 1; } else { start = mid + 1; } } return “No peak element found”; } . | This function is using a while loop to search for a “peak” element in an array. A peak element is defined as an element that is greater than or equal to its neighbors in the array.The while loop will iterate through each element in the array and check if it is a peak. If the element is the first or last element in the array, it will only check if it is greater than or equal to its one neighbor. If it is any other element, it will check if it is greater than or equal to both of its neighbors. . | . Hack 4 . def merge_sort(data): if len(data) &lt;= 1: return data . mid = len(data) // 2 left_data = merge_sort(data[:mid]) right_data = merge_sort(data[mid:]) . left_index = 0 right_index = 0 sorted_data = [] . while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: sorted_data.append(left_data[left_index]) left_index += 1 else: sorted_data.append(right_data[right_index]) right_index += 1 . sorted_data += left_data[left_index:] sorted_data += right_data[right_index:] . return sorted_data . | . if name == ‘main’: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] sorted_data = merge_sort(data) print(sorted_data) . This is a Python function that implements the merge sort algorithm for sorting a list of numbers in ascending order. | . Merge sort is a divide and conquer algorithm that works by repeatedly dividing the input list in half until each sublist contains only one element, and then merging the sublists back together in a sorted manner. . Hack 5 . def heap_permutation(data, n): if n == 1: print(data) return . for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] . | . if name == ‘main’: data = [1, 2, 3] heap_permutation(data, len(data)) . This is a Python function that generates all possible permutations of a given list using the heap’s algorithm. A permutation is an arrangement of a set of items in a specific order. For example, the permutations of the list [1, 2, 3] are [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1]. | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/12/15/17-18hw.html",
            "relUrl": "/fastpages/markdown/2022/12/15/17-18hw.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 16 Homework",
            "content": "Question Answer . Eli Gilmour |   | . 1 | No question here | . 2 | No question here | . 3 | C. To make the simulation more accurate | . 4 | A. Weather | . 5 | C. Situation considered | . 6 | A. Simulation | . 7 | A. Simulation | . 8 | No question here | . 9 | B. Experiment/calculation | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/12/15/16hw.html",
            "relUrl": "/fastpages/markdown/2022/12/15/16hw.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 14/15 Homework",
            "content": "Reflection / Notes . libraries contain procedures used in creating novel programs.Existing code segments can be derived from internal or external sources: Libraries, Previously written code. Libraries simplify complex programs.APIs specify how procedures in libraries should behave and be utilized. Documentation for APIs/Libraries are necessary to gain proper understanding into how to use them. | . 1. What does the random(a,b) function generate? . A. A random integer from a to be exclusive . B. A random integer from a to b inclusive. = Answer . C. A random word from variable a to variable b exclusive. . D. A random word from variable a to variable b inclusive. . The random(a,b) function generates a random integer from a to b inclusive. This means that the function will return a random whole number that is greater than or equal to a and less than or equal to | . 2. What is x, y, and z in random.randrange(x, y, z)? . A. x = start, y = stop, z = step = Answer . B. x = start, y = step, z = stop . C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . In the random.randrange(x, y, z) function, x represents the start of the range, y represents the end of the range, and z represents the step size. This means that the function will return a random integer from x to y, inclusive, with a step size of z. | . 3. Which of the following is NOT part of the random library? . A. random.item = Answer . B. random.random . C. random.shuffle . D. random.randint . The random library is a collection of functions and methods for generating random numbers and other random data in Python. Some of the functions and methods included in the random library are random.item, random.random, random.shuffle, and random.randint. | . 4 . What is the advantage of using libraries? | Reuse of code: Libraries allow you to reuse existing code, which can save you time and effort when working on a new project. This means you don’t have to reinvent the wheel every time you need to perform a common task, such as generating a random number or sorting a list. Improved organization: Libraries can help you organize your code, making it easier to maintain and modify. By using libraries, you can break your code into smaller, more manageable pieces, which can make it easier to understand and debug. Consistency: Libraries can help ensure that your code is consistent and follows best practices. By using a well-established library, you can be confident that the code you are using is reliable and has been tested and refined by others. | . Write a thorough documentation of the following code. | the code begins by importing the random module, which provides functions for generating random numbers and data. Next, the input function is used to prompt the user to enter a list of names. The user’s input is stored in a string called names_string The split method is then used to split names_string into a list of individual names, using the comma character as a delimiter. This list is stored in a variable called names. The len function is used to determine the number of items in the names list, and this value is stored in the variable num_items. The random.randint function is then used to generate a random integer between 0 and num_items - 1. This number is stored in the variable random_choice. The selected name is retrieved from the names list using the random_choice index, and stored in the variable person_who_will_pay. | . 5 . Create a program to pick five random names from a list of at least 15 names | import random . names = [“jerry”, “Bob”, “Charlie”, “David”, “Emily”, “Frank”, “Gina”, “Hannah”, “Ivan”, “Jenny”, “Karen”, “Liam”, “Megan”, “Nina”, “Owen”] . selected_names = random.sample(names, 5) . print(“The selected names are:”) for name in selected_names: print(name) . The code does work, I just can’t put in notebook because My notebooks are having problems uploading. You can try if you want. Create a program to simulate a dice game where each player rolls two fair dice (6 sides); the player with the greater sum wins | | . import random . player1_dice1 = random.randint(1, 6) player1_dice2 = random.randint(1, 6) player1_sum = player1_dice1 + player1_dice2 . player2_dice1 = random.randint(1, 6) player2_dice2 = random.randint(1, 6) player2_sum = player2_dice1 + player2_dice2 . if player1_sum &gt; player2_sum: print(“Player 1 wins!”) elif player2_sum &gt; player1_sum: print(“Player 2 wins!”) else: print(“It’s a tie!”) . The code does work, I just can’t put in notebook because My notebooks are having problems uploading. You can try if you want. | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/12/14/homework.html",
            "relUrl": "/fastpages/markdown/2022/12/14/homework.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 12-13 Homework",
            "content": "Homework Part 1 . Problem 1: This problem involves parameters . Qais is writing code to calculate formulas from his math class. He’s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance ​ . Highlight which of these is the best procedure for calculating and displaying average speed. PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } | PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } | PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) = Answer } | . | . . Problem 2: Procedures with return values . James Hunter is looking through his classmate’s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, “!!!”) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(“im mad”) . After that line of code runs, will nothing be displayed? . True . False = Answer . The procedure heightenEmotions takes a string as input, manipulates it using the CONCAT and UPPER procedures, and then returns the resulting string. | . . Problem 3: Procedures with return values . Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) = Answer . | totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . | | totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) = Answer . 4. laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . Part 2 . PROCEDURE find a () . { c – 9 . b &lt;-- 9 * 9 a &lt;-- b * c . Print (a) . } . What is a? = 729 = Answer cost ⟵ 173 tax - 10% . PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;– 100 + percentTaxed . temp &lt;-- temp / 100 cost &lt;-- cost x temp Print(cost)} . What is the cost? = cost is $190.30 Tempature - 103 Degrees . PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} answer = 39.444 . # 3.13 part 1 and 2 . ### #1. Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) | . PROCEDURE updateTopRunningBack(currentRB, currentRBYardsPerGame, topRB, topRBYardsPerGame) . { IF (currentRBYardsPerGame &gt; topRBYardsPerGame) { topRB &lt;– currentRB topRBYardsPerGame &lt;– currentRBYardsPerGame } } . #2. Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } . #3. Which Is the Correct Way to define the Name of a Procedure?** . A. PROCEDURE MYLIST | B. PROCEDURE MyList = Answer | C. procedure mylist | . #4. Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/12/11/12-13hw.html",
            "relUrl": "/fastpages/markdown/2022/12/11/12-13hw.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 2-3 Vocab",
            "content": "Unit 2 Vocab . Bits are the smallest unit of data in computing. A bit can have a value of either 0 or 1, and is often used to represent a binary value. . | Bytes are a unit of digital data consisting of eight bits. This is the most common unit used to measure the amount of data stored in a computer or transmitted over a network. . | Hexadecimal, also known as hex, is a number system with base 16. It uses 16 distinct symbols, most often the symbols 0-9 to represent values zero to nine, and A, B, C, D, E, F to represent values ten to fifteen. . | Nibbles are a unit of digital data consisting of four bits, or half a byte. . | Unsigned integers are whole numbers that can only have positive values or zero. These numbers do not have a sign to indicate whether they are positive or negative, and are often used to represent values that can only be positive, such as the size of a file or the number of items in a set. . | Signed integers are whole numbers that can have both positive and negative values. These numbers have a sign to indicate whether they are positive or negative, and are often used to represent values that can be either positive or negative, such as the result of a mathematical operation. . | Floating-point numbers, also known as floats, are numbers that have a decimal point. These numbers are often used to represent values that can have a fractional part, such as the result of a division operation. . | Boolean values are values that can only be either true or false. These values are often used in programming to represent a binary condition, such as whether a certain condition is met or not. . | ASCII (American Standard Code for Information Interchange) is a character encoding standard used to represent text in computers and other devices. It uses a set of 128 characters, including the letters of the English alphabet, numbers, and special symbols. . | Unicode is a character encoding standard used to represent text in computers and other devices. It includes all of the characters in the ASCII standard, as well as additional characters from other languages and symbols. . | RGB (Red, Green, Blue) is a color model used to represent colors on a computer or other electronic device. In this model, colors are represented by a combination of the primary colors red, green, and blue, each with a different intensity value. . | Lossy data compression is a method of reducing the size of a file by discarding some of the data. This can result in a loss of quality, but can also significantly reduce the file size. . | Lossless data compression is a method of reducing the size of a file without discarding any data. This ensures that the quality of the data is preserved, but may not result in as significant a reduction in file size as lossy compression. . | . Unit 3 Vocab . A variable is a named location in a computer’s memory that is used to store a value. The value stored in a variable can be changed, and the same variable can be used to store different values at different times. . | Data types are the classification of data based on their type and the operations that can be performed on them. Common data types include integers, floating-point numbers, strings, and Booleans. . | A list is a collection of data items that are organized in a specific order. In Python, lists are represented using square brackets and can contain any data type, including other lists. . | A 2D list is a list that contains other lists as its items. This allows for the creation of data structures that have more than one dimension, such as a grid or a table. . | A dictionary is a data structure that uses keys to map to values. In Python, dictionaries are represented using curly braces and can contain any data type. . | A class is a template or blueprint for creating objects in object-oriented programming. Classes define the properties and behaviors of objects, and objects are instances of a class. . | An algorithm is a step-by-step procedure for solving a problem or achieving a specific goal. Algorithms are used in many different fields, including computer science, mathematics, and engineering. . | A sequence is a type of control structure in which a set of instructions are executed in a specific order. . | Selection is a type of control structure in which a specific set of instructions are executed based on the evaluation of a condition. . | Iteration is a type of control structure in which a set of instructions are repeated until a specific condition is met. . | An expression is a combination of variables, operators, and other elements that produces a value. In programming, expressions are often used in control structures to evaluate conditions. . | Comparison operators are operators that are used to compare two values. In Python, the comparison operators include &lt; (less than), &gt; (greater than), == (equal to), and != (not equal to). . | Boolean expressions are expressions that evaluate to either true or false. In programming, Boolean expressions are often used in control structures to determine which instructions to execute. . | Selection statements are control structures that use Boolean expressions to evaluate conditions and decide which instructions to execute. In Python, the selection statement is the if statement. . | Iteration statements are control structures that repeat a set of instructions until a specific condition is met. In Python, the iteration statements are the for and while loops. . | A truth table is a table that shows the possible combinations of inputs and outputs for a logical operation. Truth tables are often used to evaluate the behavior of Boolean expressions. . | Characters are the basic building blocks of a string. In Python, characters are represented as single quotes (e.g. ‘a’) and can be any letter, number, or symbol. . | Strings are collections of characters that are used to represent text. In Python, strings are represented as double quotes (e.g. “Hello”) or single quotes (e.g. ‘Hello’). . | The length of a string is the number of characters it contains. In Python, the length of a string can be found using the len() function. . | Concatenation is the process of joining two or more strings together to form a new string. In Python, concatenation is performed using the + operator. . | The upper() and lower() methods are used to convert a string to all uppercase or all lowercase characters . | Traversing a string means to access each character in the string one by one. In Python, this can be done using a for loop and the len() function to iterate over the characters in a string. . | The if, elif, and else keywords are used in Python to create conditional statements. . | The if statement is used to evaluate a condition and execute a specific set of instructions if the condition is true. . | The elif statement is used to evaluate additional conditions if the original if condition is false. . | The else statement is used to specify a default set of instructions to execute if all other conditions are false. . | Nested selection statements are if statements that are placed inside of other if statements. This allows for the creation of complex conditional statements that can evaluate multiple conditions. . | The for and while loops are used in Python to repeat a set of instructions multiple times. The for loop is used to iterate over a sequence of items, such as the elements of a list. The while loop is used to repeat a set of instructions as long as a specific condition is true. . | The range() function is used in Python to generate a sequence of numbers. This can be used in a for loop to specify the number of times to repeat the loop. . | The break and continue keywords are used in Python to control the flow of a loop. The break keyword is used to exit a loop completely, while the continue keyword is used to skip the current iteration of the loop and continue with the next iteration. . | Procedural abstraction is the process of separating the details of how a task is performed from the overall logic of the program. In Python, this is achieved using def procedures, which allow for the creation of reusable blocks of code that can be called from other parts of the program. . | Parameters are variables that are used to pass information into a def procedure. When a procedure is called, the values of the parameters are specified and are used by the procedure to perform its tasks. . | Return values are the values that are returned by a def procedure after it has finished executing. Return values can be used by the calling code to access the results of the procedure’s operations. . | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/12/09/vocab.html",
            "relUrl": "/fastpages/markdown/2022/12/09/vocab.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "unit 3 section 8/10 Homework",
            "content": "excercise 1 . list = [1, 2, 3, 4, 5] reversed = [] for value in list: reversed = [value] + reversed print(reversed) . excercise 2 . list = [1, 2, 3, 4, 5] reversed = [] for value in list: reversed = [value] + reversed print(reversed) . reflection . I learned how to create a bubble sort list and learned what each command does and how to write it. Also how to create a reversed list and print. . Quiz corrections . . I got this question wrong because I thought that the position of an element in a list, starts at 1 but it starts at zero. . My Notebook isn’t working so I put the code in a Markdown. . . . I got this question wrong because I thought that the position of an element in a list, starts at 1 but it starts at zero. .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/12/06/8and10hw.html",
            "relUrl": "/fastpages/markdown/2022/12/06/8and10hw.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Lesson Grades for unit section 3 Presentations",
            "content": "3.1 and 3.2 Lesson Grades . I got 0.8 out of 1 . | The reason I got 0.8 out of 1 because I didn’t do the video two binary hacks. I didn’t know that there were hacks, I missed this page when I was doing the homework. . | . 3.3 and 3.4 Lesson Grades . I got a 0.95 out of 1 . | I answered each question accurately and provided explantations for all. I didn’t do anything above and beyond to get the 1. . | . 3.5 and 3.7 Lesson Grades . I got 0.95 out of 1 . | I put in Great effort put into completion of work nice reflection and made a nice flowchart. . | . 3.8 and 3.10 Lesson Grades . I got a 0.9 out of 1 . | I put in great effort and focuesed in on their presentation and they said I had great work. . | . 3.12 and 3.13 Lesson Grades . I got a 0.9 out of 1 . | I did everything on time and everything that was required and put In good effort. . | . 3.14 and 3.15 Lesson Grades . I got a 0.9 out of 1 . | all of my mc questions were correct and all of the expecations were met. . | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/12/02/grades.html",
            "relUrl": "/fastpages/markdown/2022/12/02/grades.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit section 5-7 Homework",
            "content": "3.5 Binary Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | B. False Answer = B, number B is larger then number D | . 2. 10(D) ≠ 0110(B) . A. True | B. False Answer = A, because binary D is not equal to B | . 3. 56(D) ≥ 111000(B) . A. True | B. False Answer B, 56 is not equal to B | . 3. 99(D) &lt; 1110011(B) . A. True | B. False Answer = A, because Binary B is larger than binary D | . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 0 | . . Testing out relational operators . Practice with these statements . print(20 &gt; 20) # How can you change the operator to print a value of False? . x = 30 y = 20 z = 10 print(x &gt;= y + z) # How can this return true by only manipulating the operator? . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;– 75 | IF result &lt; 80 { DISPLAY(“Please schedule a retake.”) } | ELSE { DISPLAY(“Nice job!”) } | . Nice job! | Display | Please schedule a retake. (answer) | 75 (75 is lower than 80) 2. How is an if statement different from an if-else statement. . | Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. (answer) | They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. (statement must be made in order to go through the code) 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . | If statement | If-else statement (answer) (if he had gas he would go, but no gas means don’t go) 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . | If statement (answer) | If-else statement (doesn’t say what he’s doing when not sunny) Using Python . | animals = [“lion”, “tiger”, “wildebeest”, “shark”, “jellyfish”, “blobfish”, “raven”] . for i in animals: if i == “shark”: # What boolean value does this statement cause? print(“Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!”) else: print(i) for i in animals: if i == “lion” or “wildebeest” or “raven”: print(“This animal lives in the desert”) . Practice . Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . Write code here . beefWellington = { “meat”: True, “prepTime”: 150, “name”: “Beef Wellington” } . cheeseQuesadilla = { “meat”: False, “prepTime”: 10, “name”: “Cheese Quesadilla” . } . chickenAlfredo = { “meat”: True, “prepTime”: 60, “name”: “Chicken Alfredo” } . def cookMeal(dish): if dish[“prepTime”] &lt;= 30: if dish[“meat”] == False: print(“You can cook a”, dish[“name”]) else: print(“Sorry, you do not have meat and cannot cook a”, dish[“name”] ) else: print(“Sorry, you do not have enough time and cannot cook a”, dish[“name”] ) . cookMeal(beefWellington) cookMeal(cheeseQuesadilla) cookMeal(chickenAlfredo) . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don’t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . . Answer . The person would recieve a 2.0 because they have three issues which is more than 2, but they can’t get more points because they don’t have 5 scrumboard tasks completed. | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/12/01/testsubject.html",
            "relUrl": "/fastpages/markdown/2022/12/01/testsubject.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit section 3-4 Homework",
            "content": "numbers = [0,1,2,3,4,5,6,7,8,9,10]#sequencing evens = []#sequencing for i in numbers:#selection if (numbers[i] % 2 == 0):#iteration evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10]#sequencing odd = []#sequencing for i in numbers: if (numbers[i] % 1 == 0):#selection odd.append(numbers[i])#iteration print(odd) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] . given the following code segment below: a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d . Answer = a = 1, b = 7, c = 3, d = 7 . A = 1 because even though a =7 at the start, it turns into 1 when b = a b = 7 because b starts off at 1 and then b turns into a which is 7 c = 3 because 3 = c d = c + d =7 . consider the following code segment: hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true the value of hot is false, the value of cold is true the value of hot is true, the value of cold is false the value of hot is false, the value of cold is false . Answer = the value of hot is true, the value of cold is true . num1 = 12 num2 = 18 num3 = 2 num1 = num2 + num3 num3 = num1 + num2 . What is value of num1 and num3? . Num1 = 20 Num3 = 30 . | num1 = 4 num2 = 1 num3 = 28 num2 = num1 + num3 num1 = num3 + num2 . What is value of num1 and num3? . Num2 = 32 Num1 = 29 . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . What would the result be? . SmithB@gmail.com . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . ompuook .",
            "url": "https://eligilmour.github.io/Eli-1/javascript/markdown/2022/11/29/theoshomework.html",
            "relUrl": "/javascript/markdown/2022/11/29/theoshomework.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit section 1-2 homework pt2",
            "content": "Hacks . Consider the following code segment: . currentScore ⟵ 10 highScore ⟵ currentscore currentScore ⟵ 7 DISPLAY (currentScore) . What will the currentScore be after running this code segment? | A. 17 b. 10 c. 7 d. none of the above . Answer = C . What will the highScore be? | A. 17 b. 10 c. 7 d. none of the above . Answer = B . Consider the following code segment: | . num1 ⟵ 4 num2 ⟵ 6 num1 ⟵ num 2 DISPLAY(num1) . DISPLAY(num2) . What is displayed after running this code segment? | A. 4 6 b. 6 4 c. 4 4 d. 6 6 . Answer = D . Consider the following code segment: | . num1 ⟵ 25 num2 ⟵ 15 num3 ⟵ 30 num2 ⟵ num3 num3 ⟵ num1 num1 ⟵ num2 DISPLAY(num1) . DISPLAY(num2) . DISPLAY(num3) . What is displayed after running this code segment? | A. 25 15 30 b. 30 30 25 c. 30 15 30 d. 15 30 25 . Answer = B . Consider the following code segment: . p ⟵ 10 q ⟵ 20 r ⟵ 30 s ⟵ 40 p ⟵ q q ⟵ r s ⟵ q r ⟵ p . What is the value of r as a result of running this code segment | A. 10 b. 20 c. 30 d. 40 . Answer = B . Consider the following code segment: . first ⟵ true second ⟵ false second ⟵ first first ⟵ second . Insert Question | A. The value of first is true, and the value of second is false. b. The value of first is false, and the value of second is true. c. The value of first is true, and the value of second is true. d. The value of first is false, and the value of second is false. . Answer = C . Consider the following code segment: | a ⟵ 10 b ⟵ 20 c ⟵ 30 d ⟵ 40 x ⟵ 20 b ⟵ x + b a ⟵ x + 1 d ⟵ c / d + 2 DISPLAY(a) . DISPLAY(b) . DISPLAY(c) . DISPLAY(d) . What is displayed as a result of executing the code segment? | A. 21 40 30 50 b. 10 20 30 40 c. 21 40 30 40 d. 21 30 40 50 . Answer = A . My practice Problems . a ⟵ 19 a ⟵ b a ⟵ 3 Display(b) | Answer = ? . a ⟵ 99 a ⟵ b a ⟵ 4 c ⟵ 13 a ⟵ c Display(c) | Answer = ? . a ⟵ 9 a ⟵ c a ⟵ 8 c ⟵ 13 a ⟵ b Display(b) | Answer = ? . a ⟵ 18 b ⟵ a a ⟵ 11 c ⟵ 00 a ⟵ c Display(A) | Answer = ? . a ⟵ 1 a ⟵ b a ⟵ 30 c ⟵ 15 a ⟵ c D ⟵ 44 Display(D) | Answer = ? . a ⟵ 1 a ⟵ b a ⟵ 30 c ⟵ 15 a ⟵ c D ⟵ 44 D ⟵ b Display(B) | Answer = ? .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/11/29/group1pt2.html",
            "relUrl": "/fastpages/markdown/2022/11/29/group1pt2.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit section 1-2 homework pt1",
            "content": "Practice questions . You want to store the number of apples in a shop. What is the best variable name and data type? | A. numApples, integer b. apples, text c. numApples, string d. isApples, boolean . Answer = A . You are storing true or false in a variable that asks if the classroom is cold. What is the best variable name and data type? | A. weather, integer b. weather, boolean c. isCold, boolean d. cold, string . Answer = c . How do you store the ID numbers for the students in the classroom? Choose the best variable name and data type: | A. IDnumber, string b. whatID, integer c. IDnumberofthestudentsintheclassroom, boolean d. IDnumberofthestudentsintheclassroom, integer . Answer = A . Is itisRainingtodayinsandiego a better option than isRaining? | A. Yes b. No . Answer = no . Which of the following types of data is best for a true or false question? | A. Boolean b. String c. Float d. All of the above . Answer = A . What is the difference between an integer and string of numbers? | A. An integer is just a set data type while a string of numbers can be changed with addition and subtraction b. An integer can be letters and numbers while a string is just numbers c. An integer is just numbers while a string is just words d. An integer can be changed with addition and subtraction and a string is a set number or string of letters. . Answer = D . My practice questions . You want to store the number of cheeseburgers in a resturant. What is the best variable name and data type? | A. numcheeseburgers, integer b. cheeseburgers, text c. numcheeseburgers, string d. ischeeseburgers, boolean . Answer = ? . How do you store the amount of food the students eat in the classroom? Choose the best variable name and data type: | A. IDfood, string b. whatfood, integer c. amountoffood, boolean d. amounoffood, integer . Answer = ? . Is eatingallthefoodintheworld a better option than eatingfood? | A. yes b. No . Answer = ? .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/11/29/Group1homept1.html",
            "relUrl": "/fastpages/markdown/2022/11/29/Group1homept1.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Tri 1 Final Test Corrections",
            "content": "Score . 48/50 . Question 28 ( wrong ) . . I put answer A because I thought that if the number of units is greater than 25 it would charge them 7 dollars after that. | But Answer C is correct because it shows that when the number of units is greater than 25, it would charge them 7 dollars and the code looks like cost&lt;- 25 * 5 + (numUnits -25) * 7 | . Question 48 ( wrong ) . . I put answer D because the answer is x,y and z and I thought the since 50 is equal to 50, I thought that it would have a value of 50 | Answer C is correct because the value of y is initially 50, but its value is changed to 75 in the fifth statement. | . Questions I searched up . Question 38 because this question was very confusing to me and I didn’t know what temp means in the code segment. I don’t get where they got temp. | Question 30 because it talks about data abstraction and I don’t really get what that means. | Question 26 because I didn’t know that Boolean means that the status of whether a store is open can be represented using only the values true and false, I didn’t know this applies to isOpen. | Question 23 because I didn’t know The position of the runner is sampled at regular intervals to approximate the real-word position. | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/11/22/TriFinal1Corrections.html",
            "relUrl": "/fastpages/markdown/2022/11/22/TriFinal1Corrections.html",
            "date": " • Nov 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Night@Museum",
            "content": "Night@Museum . Night at the museum is a night at del norte from 6-7:30 pm and this is a night where family, friends, and students can come to del norte and take a trip around all of the elective classes. Ceramics, 3d Animation, Ap Computer Science, Drawing/Painting, and AP Art studio were displaying their Final projects to Friends and family. | ( This was a very fun night and I enjoyed looking at all of the art pieces and I can’t wait to be back again ) | . Olivia Haffie’s Art piece . . This is Olivia Haffie’s art ( drawing and Painting ) | This drawing stood out to me because the colors on this piece are amazing and are very bright which caught my eye. | I like how she used many different shapes and different shades of colors. | . Ella Duggan Art Piece . . This is Ella Duggans art ( Ap Studio Art ) | This Drawing was very unique and filled with lots of details. | The colors and texture are very realistic and the concept of the drawing is amazing. | I was Very impressed and this is the drawing that really stood out to me. | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/11/04/night@museum.html",
            "relUrl": "/fastpages/markdown/2022/11/04/night@museum.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Blogging about Video Roles",
            "content": "Cool Coders (Ava, Alexa, Antony, Shruthi) Period 4 . There website is about creating a way to manage merchandise for ASB. | Shruthi is the dev ops for the group and she has been working on delpoying the AWS. | Ava is the scrum master and she has been helping everyone with individual assignments and overlooking everyhting to make sure it works. | Alexa is the frontend and she has been working on the fastpages creating the looks of the website. | Antony is the Backend and he has been creating tables using json and using buttons to manage how many products of each item they have. | The cool coders used a stock api and created a list of items including hoodies and pants and then it prints the quantity of the item. | . Jake , Finn, Max, Parker ( Period 4 ) . their customer targert needs: Customers that use spotify or other streaming platforms | make demos of our website | ask for feedback from customers | . | Expectations of each feature: HTML tabs that bring you to a page about information of each genre | User imputs button where they get random song data and api spits out random song ( top 10 tiktok songs ) | . | Jake is scrum master | Finn is dev ops | Max is the backend developer | Parker is the frontend developer | They are going to use blooging to talk about hacks and development ( also to talk about artists ) | Comments ( asking questions ) | . Aarav , Braeden , Tigran , Vunsh ( APCSA ) . Creating Quizme to make school easier with using flashcards and multiple choice questions to replace quizlet. | Using Visual studios live share to share code outside of school | Creating customer feedback on website | Video tutorial for people who can’t read english | Tigran is frontend developer | Aarav is the scrum master | Frontend code uses javascript, css, and HTML | Vunsh is devops and worked on Deployment using AWS | Braeden is Backend Developer | Using lists to store flashcard information and store data | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/10/31/videonotesofroles.html",
            "relUrl": "/fastpages/markdown/2022/10/31/videonotesofroles.html",
            "date": " • Oct 31, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Javascript code ( explaining )",
            "content": "This code is creating an HTML table . tr creating a row | . | th creating an header | . | table creating the shape of the table | . | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Time&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;td id=&quot;time&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_cases&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_deaths&quot;&gt;&lt;/td&gt; &lt;td id=&quot;active_cases&quot;&gt;&lt;/td&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Country&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- generated rows --&gt; &lt;/tbody&gt; &lt;/table&gt; . This code block is how it fetches the data for the covid cases from the api which is being taken from the backend. | The URl is where you access the api to use the data collected. | . &lt;!-- Script is layed out in a sequence (no function) and will execute when page is loaded --&gt; &lt;script&gt; // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // prepare fetch options const url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot;; const headers = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; . The code block is telling us how we get the data of the covid cases and then formatting it in a row and column. | It formats the countries name, cases, deaths, active cases in a row using the api. | . // fetch the API fetch(url, headers) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); console.log(data.world_total) // World Data document.getElementById(&quot;time&quot;).innerHTML = data.world_total.statistic_taken_at; document.getElementById(&quot;total_cases&quot;).innerHTML = data.world_total.total_cases; document.getElementById(&quot;total_deaths&quot;).innerHTML = data.world_total.total_deaths; document.getElementById(&quot;active_cases&quot;).innerHTML = data.world_total.active_cases; // Country data for (const row of data.countries_stat) { console.log(row); // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const name = document.createElement(&quot;td&quot;); const cases = document.createElement(&quot;td&quot;); const deaths = document.createElement(&quot;td&quot;); const active = document.createElement(&quot;td&quot;); // data is specific to the API name.innerHTML = row.country_name; cases.innerHTML = row.cases; deaths.innerHTML = row.deaths; active.innerHTML = row.active_cases; // this builds td&#39;s into tr tr.appendChild(name); tr.appendChild(cases); tr.appendChild(deaths); tr.appendChild(active); // add HTML to container resultContainer.appendChild(tr); } }) }) . The code block below shows how the code catches fetch errors when the server is blocked. | So if tr or td has an error, the code will detect the error. | . // catch fetch errors (ie ACCESS to server blocked) .catch(err =&gt; { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); }); &lt;/script&gt; .",
            "url": "https://eligilmour.github.io/Eli-1/2022/10/18/writingaboutcode.html",
            "relUrl": "/2022/10/18/writingaboutcode.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Most liked 19 1 Q: Why did I divide sin by tan? A: Just cos. haha: 19 boohoo: 1 Most jeered 7 5 Java programmers are some of the most materialistic people I know, very object-oriented haha: 13 boohoo: 7 Random joke 0 If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will frustrate them for a lifetime. haha: 15 boohoo: 0 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence using random joke num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . NameError Traceback (most recent call last) /home/eli/vscode/Eli-1/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb Cell 7 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/eli/vscode/Eli-1/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; responses = [] # responses list &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/eli/vscode/Eli-1/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; # Get the count of jokes on server -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/eli/vscode/Eli-1/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; count_response = requests.get(url+&#34;count&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/eli/vscode/Eli-1/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; count_json = count_response.json() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/eli/vscode/Eli-1/_notebooks/2022-10-17-PBL-webapi_tutorial.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; count = count_json[&#39;count&#39;] NameError: name &#39;requests&#39; is not defined .",
            "url": "https://eligilmour.github.io/Eli-1/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Internet Quiz",
            "content": "Notes (Video 1) . Packet: small amount of data sent over. Each pakect also includes the source and destination of information. | Computer network: a group of interconnected computing devices capable of sending and receiving data. | Packet switching: A message is broken up into small packets and sent in any order. Then they are reassembled by the recipient’s device. | Routing: is the process of finding a path from sender to receiver. | Bandwidth is measured in bits ber second. | . Notes (video 2) . Open system Interconnect: The layers you have to go through to communicate 7 groups of protocols. | Transmission control protocol: Establishes a common standard for how to send messages between devices on the internet. | Each NIC has a unique adress associated with it called a media access control adress. It is used for local hops. | The most common netwrok access protocol is ethernet. | Routers are special purpose computer with a MAC adress. | http: How to ask and recieve data from web servers. | https: like http, but with security. Usually uses TCP port 443. | . . Corrections . Q2. Which of the following is a primary reason for the use of open protocols on the Internet? . My answer: Open protocols allow devices to specify how data packets are to be routed on the Internet in advance. | Correct Answer: Open protocols provide a way to standardize data transmission between different devices. | . Q3. Which of the following best describes the relationship between the World Wide Web and the Internet? . My answer: The World Wide Web is a protocol that is accessed using a data stream called the Internet. | Correct Answer: The World Wide Web is a system of linked pages, programs, and files that is accessed via a network called the Internet. | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/10/16/4.1quiz.html",
            "relUrl": "/fastpages/markdown/2022/10/16/4.1quiz.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "API Stocks",
            "content": "from polygon import RESTClient from typing import cast from urllib3 import HTTPResponse # API key for the stocks client = RESTClient(&quot;w4oXBFSyC3bTkpJeVwSnKt8iuwBgMeMy&quot;) # api key in quotes . from polygon import RESTClient from typing import cast from urllib3 import HTTPResponse import time client = RESTClient(&quot;w4oXBFSyC3bTkpJeVwSnKt8iuwBgMeMy&quot;) # api_key is used aggs = client.get_aggs(&quot;AAPL&quot;, 1, &quot;month&quot;, &quot;2021-01-01&quot;, &quot;2021-12-01&quot;) data = [] for i in range (12): data.append({&quot;2021-&quot; +str(i + 1) + &quot;-1:&quot;: aggs[i].open}) data.append({&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot;: aggs[i].close}) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].open)) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].close)) time.sleep(12) print(data) . 2021-1-1:133.52 2021-1-1:131.96 2021-2-1:133.75 2021-2-1:121.26 2021-3-1:123.75 2021-3-1:122.15 2021-4-1:123.66 2021-4-1:131.46 2021-5-1:132.04 2021-5-1:124.61 2021-6-1:125.08 2021-6-1:136.96 2021-7-1:136.6 2021-7-1:145.86 2021-8-1:146.36 2021-8-1:151.83 2021-9-1:152.83 2021-9-1:141.5 2021-10-1:141.9 2021-10-1:149.8 2021-11-1:148.985 2021-11-1:165.3 2021-12-1:167.48 2021-12-1:177.57 [{&#39;2021-1-1:&#39;: 133.52}, {&#39;2021-1-1:&#39;: 131.96}, {&#39;2021-2-1:&#39;: 133.75}, {&#39;2021-2-1:&#39;: 121.26}, {&#39;2021-3-1:&#39;: 123.75}, {&#39;2021-3-1:&#39;: 122.15}, {&#39;2021-4-1:&#39;: 123.66}, {&#39;2021-4-1:&#39;: 131.46}, {&#39;2021-5-1:&#39;: 132.04}, {&#39;2021-5-1:&#39;: 124.61}, {&#39;2021-6-1:&#39;: 125.08}, {&#39;2021-6-1:&#39;: 136.96}, {&#39;2021-7-1:&#39;: 136.6}, {&#39;2021-7-1:&#39;: 145.86}, {&#39;2021-8-1:&#39;: 146.36}, {&#39;2021-8-1:&#39;: 151.83}, {&#39;2021-9-1:&#39;: 152.83}, {&#39;2021-9-1:&#39;: 141.5}, {&#39;2021-10-1:&#39;: 141.9}, {&#39;2021-10-1:&#39;: 149.8}, {&#39;2021-11-1:&#39;: 148.985}, {&#39;2021-11-1:&#39;: 165.3}, {&#39;2021-12-1:&#39;: 167.48}, {&#39;2021-12-1:&#39;: 177.57}] . from polygon import RESTClient from typing import cast from urllib3 import HTTPResponse import time client = RESTClient(&quot;w4oXBFSyC3bTkpJeVwSnKt8iuwBgMeMy&quot;) # api_key is used aggs = client.get_aggs(&quot;TSLA&quot;, 1, &quot;month&quot;, &quot;2021-01-01&quot;, &quot;2021-12-01&quot;) data = [] for i in range (12): data.append({&quot;2021-&quot; +str(i + 1) + &quot;-1:&quot;: aggs[i].open}) data.append({&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot;: aggs[i].close}) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].open)) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].close)) time.sleep(12) print(data) . 2021-1-1:239.82 2021-1-1:264.51 2021-2-1:271.43 2021-2-1:225.1667 2021-3-1:230.0367 2021-3-1:222.6433 2021-4-1:229.4567 2021-4-1:236.48 2021-5-1:234.6 2021-5-1:208.4067 2021-6-1:209.2667 2021-6-1:226.5667 2021-7-1:227.9733 2021-7-1:229.0667 2021-8-1:233.3333 2021-8-1:245.24 2021-9-1:244.6933 2021-9-1:258.4933 2021-10-1:259.4667 2021-10-1:371.3333 2021-11-1:381.6667 2021-11-1:381.5867 2021-12-1:386.8983 2021-12-1:352.26 [{&#39;2021-1-1:&#39;: 239.82}, {&#39;2021-1-1:&#39;: 264.51}, {&#39;2021-2-1:&#39;: 271.43}, {&#39;2021-2-1:&#39;: 225.1667}, {&#39;2021-3-1:&#39;: 230.0367}, {&#39;2021-3-1:&#39;: 222.6433}, {&#39;2021-4-1:&#39;: 229.4567}, {&#39;2021-4-1:&#39;: 236.48}, {&#39;2021-5-1:&#39;: 234.6}, {&#39;2021-5-1:&#39;: 208.4067}, {&#39;2021-6-1:&#39;: 209.2667}, {&#39;2021-6-1:&#39;: 226.5667}, {&#39;2021-7-1:&#39;: 227.9733}, {&#39;2021-7-1:&#39;: 229.0667}, {&#39;2021-8-1:&#39;: 233.3333}, {&#39;2021-8-1:&#39;: 245.24}, {&#39;2021-9-1:&#39;: 244.6933}, {&#39;2021-9-1:&#39;: 258.4933}, {&#39;2021-10-1:&#39;: 259.4667}, {&#39;2021-10-1:&#39;: 371.3333}, {&#39;2021-11-1:&#39;: 381.6667}, {&#39;2021-11-1:&#39;: 381.5867}, {&#39;2021-12-1:&#39;: 386.8983}, {&#39;2021-12-1:&#39;: 352.26}] . from polygon import RESTClient from typing import cast from urllib3 import HTTPResponse import time client = RESTClient(&quot;w4oXBFSyC3bTkpJeVwSnKt8iuwBgMeMy&quot;) # api_key is used aggs = client.get_aggs(&quot;GME&quot;, 1, &quot;month&quot;, &quot;2021-01-01&quot;, &quot;2021-12-01&quot;) data = [] for i in range (12): data.append({&quot;2021-&quot; +str(i + 1) + &quot;-1:&quot;: aggs[i].open}) data.append({&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot;: aggs[i].close}) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].open)) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].close)) time.sleep(12) print(data) . 2021-1-1:4.75 2021-1-1:81.25 2021-2-1:79.14 2021-2-1:25.435 2021-3-1:26.135 2021-3-1:47.455 2021-4-1:48.34 2021-4-1:43.3975 2021-5-1:44.3725 2021-5-1:55.5 2021-6-1:58.37 2021-6-1:53.535 2021-7-1:53.35 2021-7-1:40.28 2021-8-1:40.5 2021-8-1:54.56 2021-9-1:56 2021-9-1:43.8675 2021-10-1:44.85 2021-10-1:45.8775 2021-11-1:45.6325 2021-11-1:49.0525 2021-12-1:49.85 2021-12-1:37.0975 [{&#39;2021-1-1:&#39;: 4.75}, {&#39;2021-1-1:&#39;: 81.25}, {&#39;2021-2-1:&#39;: 79.14}, {&#39;2021-2-1:&#39;: 25.435}, {&#39;2021-3-1:&#39;: 26.135}, {&#39;2021-3-1:&#39;: 47.455}, {&#39;2021-4-1:&#39;: 48.34}, {&#39;2021-4-1:&#39;: 43.3975}, {&#39;2021-5-1:&#39;: 44.3725}, {&#39;2021-5-1:&#39;: 55.5}, {&#39;2021-6-1:&#39;: 58.37}, {&#39;2021-6-1:&#39;: 53.535}, {&#39;2021-7-1:&#39;: 53.35}, {&#39;2021-7-1:&#39;: 40.28}, {&#39;2021-8-1:&#39;: 40.5}, {&#39;2021-8-1:&#39;: 54.56}, {&#39;2021-9-1:&#39;: 56}, {&#39;2021-9-1:&#39;: 43.8675}, {&#39;2021-10-1:&#39;: 44.85}, {&#39;2021-10-1:&#39;: 45.8775}, {&#39;2021-11-1:&#39;: 45.6325}, {&#39;2021-11-1:&#39;: 49.0525}, {&#39;2021-12-1:&#39;: 49.85}, {&#39;2021-12-1:&#39;: 37.0975}] . from polygon import RESTClient from typing import cast from urllib3 import HTTPResponse import time client = RESTClient(&quot;w4oXBFSyC3bTkpJeVwSnKt8iuwBgMeMy&quot;) # api_key is used aggs = client.get_aggs(&quot;GOOGL&quot;, 1, &quot;month&quot;, &quot;2021-01-01&quot;, &quot;2021-12-01&quot;) data = [] for i in range (12): data.append({&quot;2021-&quot; +str(i + 1) + &quot;-1:&quot;: aggs[i].open}) data.append({&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot;: aggs[i].close}) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].open)) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].close)) time.sleep(12) print(data) . 2021-1-1:88 2021-1-1:91.368 2021-2-1:92.2293 2021-2-1:101.0955 2021-3-1:102.4 2021-3-1:103.126 2021-4-1:104.6125 2021-4-1:117.675 2021-5-1:118.2455 2021-5-1:117.8425 2021-6-1:118.722 2021-6-1:122.0895 2021-7-1:121.725 2021-7-1:134.7265 2021-8-1:135.117 2021-8-1:144.6975 2021-9-1:145 2021-9-1:133.676 2021-10-1:134.4475 2021-10-1:148.046 2021-11-1:148.046 2021-11-1:141.8975 2021-12-1:144 2021-12-1:144.852 [{&#39;2021-1-1:&#39;: 88}, {&#39;2021-1-1:&#39;: 91.368}, {&#39;2021-2-1:&#39;: 92.2293}, {&#39;2021-2-1:&#39;: 101.0955}, {&#39;2021-3-1:&#39;: 102.4}, {&#39;2021-3-1:&#39;: 103.126}, {&#39;2021-4-1:&#39;: 104.6125}, {&#39;2021-4-1:&#39;: 117.675}, {&#39;2021-5-1:&#39;: 118.2455}, {&#39;2021-5-1:&#39;: 117.8425}, {&#39;2021-6-1:&#39;: 118.722}, {&#39;2021-6-1:&#39;: 122.0895}, {&#39;2021-7-1:&#39;: 121.725}, {&#39;2021-7-1:&#39;: 134.7265}, {&#39;2021-8-1:&#39;: 135.117}, {&#39;2021-8-1:&#39;: 144.6975}, {&#39;2021-9-1:&#39;: 145}, {&#39;2021-9-1:&#39;: 133.676}, {&#39;2021-10-1:&#39;: 134.4475}, {&#39;2021-10-1:&#39;: 148.046}, {&#39;2021-11-1:&#39;: 148.046}, {&#39;2021-11-1:&#39;: 141.8975}, {&#39;2021-12-1:&#39;: 144}, {&#39;2021-12-1:&#39;: 144.852}] . from polygon import RESTClient from typing import cast from urllib3 import HTTPResponse import time client = RESTClient(&quot;w4oXBFSyC3bTkpJeVwSnKt8iuwBgMeMy&quot;) # api_key is used aggs = client.get_aggs(&quot;AMZN&quot;, 1, &quot;month&quot;, &quot;2021-01-01&quot;, &quot;2021-12-01&quot;) data = [] for i in range (12): data.append({&quot;2021-&quot; +str(i + 1) + &quot;-1:&quot;: aggs[i].open}) data.append({&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot;: aggs[i].close}) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].open)) print(&quot;2021-&quot; + str(i + 1) + &quot;-1:&quot; + str(aggs[i].close)) time.sleep(12) print(data) . 2021-1-1:163.5 2021-1-1:160.31 2021-2-1:162.118 2021-2-1:154.6465 2021-3-1:156.3945 2021-3-1:154.704 2021-4-1:155.897 2021-4-1:173.371 2021-5-1:174.2365 2021-5-1:161.1535 2021-6-1:162.1748 2021-6-1:172.008 2021-7-1:171.7305 2021-7-1:166.3795 2021-8-1:167.655 2021-8-1:173.5395 2021-9-1:174.8198 2021-9-1:164.252 2021-10-1:164.4505 2021-10-1:168.6215 2021-11-1:168.09 2021-11-1:175.3535 2021-12-1:177.25 2021-12-1:166.717 [{&#39;2021-1-1:&#39;: 163.5}, {&#39;2021-1-1:&#39;: 160.31}, {&#39;2021-2-1:&#39;: 162.118}, {&#39;2021-2-1:&#39;: 154.6465}, {&#39;2021-3-1:&#39;: 156.3945}, {&#39;2021-3-1:&#39;: 154.704}, {&#39;2021-4-1:&#39;: 155.897}, {&#39;2021-4-1:&#39;: 173.371}, {&#39;2021-5-1:&#39;: 174.2365}, {&#39;2021-5-1:&#39;: 161.1535}, {&#39;2021-6-1:&#39;: 162.1748}, {&#39;2021-6-1:&#39;: 172.008}, {&#39;2021-7-1:&#39;: 171.7305}, {&#39;2021-7-1:&#39;: 166.3795}, {&#39;2021-8-1:&#39;: 167.655}, {&#39;2021-8-1:&#39;: 173.5395}, {&#39;2021-9-1:&#39;: 174.8198}, {&#39;2021-9-1:&#39;: 164.252}, {&#39;2021-10-1:&#39;: 164.4505}, {&#39;2021-10-1:&#39;: 168.6215}, {&#39;2021-11-1:&#39;: 168.09}, {&#39;2021-11-1:&#39;: 175.3535}, {&#39;2021-12-1:&#39;: 177.25}, {&#39;2021-12-1:&#39;: 166.717}] .",
            "url": "https://eligilmour.github.io/Eli-1/2022/10/10/apistocks.html",
            "relUrl": "/2022/10/10/apistocks.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Stocks Final project Plan",
            "content": "The Idea . we are going to use polygon.io which is an api and we are creating a stock website/app that shows the three big stock funds and it will display how well each stock has done in the past 2-3 years. | . Free perks with Polygon.io . End of Day Data | 5 API Calls / Minute | 2 Years Historical Data | 100% Market Coverage | Reference Data | Fundamental Data | Corporate Actions | Aggregate Bars | . Team roles . jeffery -&gt; DevOps | Josh -&gt; Frontend | Chris -&gt; Backend | Khalid -&gt; Frontend | Eli -&gt; Backend | ryan -&gt; scrum master | . College board criteria . Program Purpose and Function purpose Create a web application that provides data for people when investing in the stock market function User selects what stock they want data for Web application provides data in the form a graphs and a table that assist you with investing | Data Abstraction We will collect data from an api in the form of dictionaries The data collected from the api will be used to create graphs and tables | Managing Complexity Data will be based on time(x-axis) and stock value(y-axis) | Procedural Abstraction The option to choose between different graphs and data tables and see different results The option to compare different stocks to another on the same graph | Algorithm Implementation TBD when we go over this in class | Testing case sensitive |",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/10/09/stockapp.html",
            "relUrl": "/fastpages/markdown/2022/10/09/stockapp.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Identifying and Correcting Errors Quiz",
            "content": ". Corrections . I got question 3 wrong on the 1.4 quiz for college board. I had to select two numbers that would be a good test number for the function. Next time I should run each number in my head and test to see which one is greater or less than the number selected. | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/10/09/1.4quiz.html",
            "relUrl": "/fastpages/markdown/2022/10/09/1.4quiz.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://eligilmour.github.io/Eli-1/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . . Important: Pay attention! It&#8217;s important. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, } total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) print(&quot;total&quot;) total= menu[item] #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 total 3.99 . . Important: Pay attention! It&#8217;s important. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, } total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) print(&quot;total&quot;) total= menu[item] #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 total 1.99 . . Important: Pay attention! It&#8217;s important. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, } total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) print(&quot;total&quot;) total= menu[item] #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 total 0.99 . Errors . I had troble writing code with while loop, where I looked at past assignments and tried to input while loop and switch the data about burger, fries and drink. | But I tried many times and there was always an error so I had to write some basic code to just display the price of what choice of item the user chose. | .",
            "url": "https://eligilmour.github.io/Eli-1/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "College Board quiz's",
            "content": ". Problems or confusion with problem sets . I was pretty confused on most of the quiz because I didn’t really know what each of those blocks of code mean. I had trouble understanding what each coefficent means and how each input to output works .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/10/02/collegeboard.html",
            "relUrl": "/fastpages/markdown/2022/10/02/collegeboard.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Final Project plan",
            "content": "Scrum board . . First Idea . data abstraction with a 2D array when loading the board and pieces. | procedural abstraction with how the player interacts with the screen and interacts with the pieces on the board. | . Important: Pay attention! It’s important. . Team roles . jeffery -&gt; DevOps | Josh -&gt; Frontend | Chris -&gt; Backend | Khalid -&gt; Frontend | Eli -&gt; Backend | ryan -&gt; scrum master | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/09/28/teamroles.html",
            "relUrl": "/fastpages/markdown/2022/09/28/teamroles.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Javascript",
            "content": "console.log(&quot;whats up everyone&quot;); . whats up everyone . var msg = &quot;whats up everyone!&quot;; console.log(msg); . whats up everyone! . function logIt(output) { console.log(output); } logIt(msg); . whats up everyone! . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2022); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2022 object ; [ 1, 2, 3 ] . function PrintType(output) { // function to output data type and data into terminal console.log(typeof output, &quot;, &quot;, output); } // define a function to hold data for a Person function Person(name, Grad, residence) { this.name = name; this.Grad = Grad; this.residence = residence; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, age: this.age, residence: this.residence, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable student var student = new Person(&quot;elijah&quot;, 2024, &quot;SanDiego&quot;); // object type is easy to work with in JavaScript PrintType(student); // before role PrintType(student.toJSON()); // output of Object and JSON/string associated with student student.setRole(&quot;Student&quot;); // set the role PrintType(student); PrintType(student.toJSON()); . object , Person { name: &#39;elijah&#39;, Grad: 2024, residence: &#39;SanDiego&#39;, role: &#39;&#39; } string , {&#34;name&#34;:&#34;elijah&#34;,&#34;residence&#34;:&#34;SanDiego&#34;,&#34;role&#34;:&#34;&#34;} object , Person { name: &#39;elijah&#39;, Grad: 2024, residence: &#39;SanDiego&#39;, role: &#39;Student&#39; } string , {&#34;name&#34;:&#34;elijah&#34;,&#34;residence&#34;:&#34;SanDiego&#34;,&#34;role&#34;:&#34;Student&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Elijah &quot;, 2024, &quot;San Diego&quot;), new Person(&quot;Josh&quot;, 2024, &quot;San Diego&quot;), new Person(&quot;Chris&quot;, 2024, &quot;San Diego&quot;), new Person(&quot;Jeffery&quot;, 2023, &quot;San Diego&quot;) ]; var teacher = new Person(&quot;Mr. M&quot;, &quot;?&quot;, &quot;San Diego&quot;) // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom PrintType(compsci.classroom); // constructed classroom object PrintType(compsci.classroom[0].name); // abstract 1st objects name PrintType(compsci.json[0]); // show json conversion of 1st object to string PrintType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object , [ Person { name: &#39;Mr. M&#39;, Grad: &#39;?&#39;, residence: &#39;San Diego&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Elijah &#39;, Grad: 2024, residence: &#39;San Diego&#39;, role: &#39;Student&#39; }, Person { name: &#39;Josh&#39;, Grad: 2024, residence: &#39;San Diego&#39;, role: &#39;Student&#39; }, Person { name: &#39;Chris&#39;, Grad: 2024, residence: &#39;San Diego&#39;, role: &#39;Student&#39; }, Person { name: &#39;Jeffery&#39;, Grad: 2023, residence: &#39;San Diego&#39;, role: &#39;Student&#39; } ] string , Mr. M string , {&#34;name&#34;:&#34;Mr. M&#34;,&#34;residence&#34;:&#34;San Diego&#34;,&#34;role&#34;:&#34;Teacher&#34;} object , { name: &#39;Mr. M&#39;, residence: &#39;San Diego&#39;, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grad&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Residence&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.Grad + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.residence + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGradResidenceRole . Mr. M | ? | San Diego | Teacher | Elijah | 2024 | San Diego | Student | Josh | 2024 | San Diego | Student | Chris | 2024 | San Diego | Student | Jeffery | 2023 | San Diego | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://eligilmour.github.io/Eli-1/2022/09/26/javascript.html",
            "relUrl": "/2022/09/26/javascript.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Psychology Notes",
            "content": "Vocabulary . Effort . You have to put in a little work and time to chnage your life for the better and have better outcomes in the future. | It won’t come over time, you have to keep working at it. | . social connections . Help other for exchnage for something greater. | Help other people’s need before ours. | Meet new people everyday | . Gratitude . Be gratful for what we have and think of positive things and cancel out the negative things in your life. | . Health . 7-8+ hours of sleep | Eat 3 meals a day with enough carbs and proteins to fuel the body. | Exercise 30-40+ min a day. | . Time . Time famine | Time affluence | Value time more than anything | . Personal Gratitude list: . Being able to be on the feild playing on military night with the fly over. | Going to see my brothers this weekend at college in two states I have never been in. | Had a nice team meal on thursday with the football team. | . Personal Goals: . Get an A on my next math test. | Win our next football game. | go to the louisville football game in Kentucky. | Get to see friends after being gone for a week. | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/09/20/psychology.html",
            "relUrl": "/fastpages/markdown/2022/09/20/psychology.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Collaboration Notes",
            "content": "Notes . Pair programming One programmer is the driver, who writes code, and the other programmer is the observer who reviews each line of code as it is typed in | The two programmers work together as a pair | . | Think,Pair,Share The first step is for each of the students to think through each problem by themselves, and then you come too as a group and collaborate, and then share out to the class. | . | computng collaboration Collaboration that includes diverse perspectives that helps avoid bias of the development of computing innovations. | . | . What I took from this videos . After watching these videos, I see how important collaboration is for heading towards sucess. For example, computer science takes alot of communication and collaboration for each of the students to find sucess in their projects. All the time you need to ask fellow students for help on something or their perspective on your project. | .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/09/20/collabrationnotes1.html",
            "relUrl": "/fastpages/markdown/2022/09/20/collabrationnotes1.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Making a quiz using App Lab",
            "content": "Design Process . 1. Choosing a topic . Before I started to make my quiz I decided I wanted to choose a topic that was revalant to me and that others can learn from when takng my quiz. I chose to create my quiz about the math I am doing in my math class.( AFA ) . 2. Writing the questions . After I chose my topic for my quiz, I searched through my math notebook to find questions on the topics we work on in class. I created these questions around what to expect in teh AFA math class. . 3. Creating my Quiz . The first step to creating my quiz was the homepage and I created something that was related to my topic, but also added some fun colors to make the homepage more intreasting. My quiz will have three questions that you have to answer in a different way each time. Including multiple choice, dropdown menu( true or false ), and check all that apply. Then at the end it will take you to the page that tells you your score. . 4. Challenges . Some challenges that I faced while creating my quiz using code.org was knowing what each function does. I am not familiar with this website and there was a lot of trial and error throughout the week. . 5. successes . Their were many successes throught the week that helped me achive finishing my quiz. At the start it was pretty dificult because I didn’t know what any of the commands and functions mean, but as I played with teh software I learned how many of the functions worked. I figured out how to make a quiz using three different questions and different ways to answer each question. The first question I created a mulitiple choice question just using buttons, Then for the second question I created a check the box type answer, and lastly I created a dropdown menu type of question. . Link to quiz . here .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/09/08/codequizblog.html",
            "relUrl": "/fastpages/markdown/2022/09/08/codequizblog.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Python List Dictionaries Iteration",
            "content": "InfoDb . InfoDb = [] # To add data to InfoDB we must use the .append function # A dictionary is made with curly braces {} InfoDb.append({ &quot;FirstName&quot;: &quot;elijah&quot;, &quot;MiddleName&quot;: &quot;david&quot;, &quot;LastName&quot;: &quot;gilmour&quot;, &quot;DOB&quot;: &quot;august 8&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Owns_Cars&quot;: &quot;2013 nissan altima&quot;, &quot;Show&quot;: &quot;Flash&quot;, &quot;Game&quot;: &quot;warzone&quot; }) InfoDb.append({ &quot;FirstName&quot;: &quot;Christopher&quot;, &quot;MiddleName&quot;: &quot;stewart&quot;, &quot;LastName&quot;: &quot;albertson&quot;, &quot;DOB&quot;: &quot;january 20&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Owns_Cars&quot;: &quot;2022 toyota Tacoma&quot;, &quot;Show&quot;: &quot;Breaking bad&quot;, &quot;Game&quot;: &quot;GTA&quot; }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;elijah&#39;, &#39;MiddleName&#39;: &#39;david&#39;, &#39;LastName&#39;: &#39;gilmour&#39;, &#39;DOB&#39;: &#39;august 8&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Owns_Cars&#39;: &#39;2013 nissan altima&#39;, &#39;Show&#39;: &#39;Flash&#39;, &#39;Game&#39;: &#39;warzone&#39;}, {&#39;FirstName&#39;: &#39;Christopher&#39;, &#39;MiddleName&#39;: &#39;stewart&#39;, &#39;LastName&#39;: &#39;albertson&#39;, &#39;DOB&#39;: &#39;january 20&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Owns_Cars&#39;: &#39;2022 toyota Tacoma&#39;, &#39;Show&#39;: &#39;Breaking bad&#39;, &#39;Game&#39;: &#39;GTA&#39;}] . Reversed List . list = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;] print(&#39;Regular List:&#39;, list) list.reverse() print(&#39;Reversed List:&#39;, list) . Regular List: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;] Reversed List: [&#39;6&#39;, &#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;] . Random List . import random print(&#39;Regular List:&#39;, list) random.shuffle(list) print(&#39;Random List:&#39;, list) . Regular List: [&#39;6&#39;, &#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;] Random List: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;6&#39;, &#39;5&#39;, &#39;4&#39;] . Loop . def print_data(d_rec): # defines function that prints data print(d_rec[&quot;FirstName&quot;], d_rec[&quot;MiddleName&quot;], d_rec[&quot;LastName&quot;]) # prints data from the dictionary print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, d_rec[&quot;Owns_Cars&quot;]) # end=&quot;&quot; make sure no return occurs print(&quot; t&quot;, &quot;Favorite show: &quot;, d_rec[&quot;Show&quot;]) print(&quot; t&quot;, &quot;Favorite game: &quot;, d_rec[&quot;Game&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output elijah david gilmour Residence: San Diego Birth Day: august 8 Cars: 2013 nissan altima Favorite show: Flash Favorite game: warzone Christopher stewart albertson Residence: San Diego Birth Day: january 20 Cars: 2022 toyota Tacoma Favorite show: Breaking bad Favorite game: GTA . While Loop . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output elijah david gilmour Residence: San Diego Birth Day: august 8 Cars: 2013 nissan altima Favorite show: Flash Favorite game: warzone Christopher stewart albertson Residence: San Diego Birth Day: january 20 Cars: 2022 toyota Tacoma Favorite show: Breaking bad Favorite game: GTA . Recersive Loop . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output elijah david gilmour Residence: San Diego Birth Day: august 8 Cars: 2013 nissan altima Favorite show: Flash Favorite game: warzone Christopher stewart albertson Residence: San Diego Birth Day: january 20 Cars: 2022 toyota Tacoma Favorite show: Breaking bad Favorite game: GTA . Quiz using dictionaries lists . question = [] # creates empty list question.append({ # adds dictionary with question and answer to list using .append &quot;Question&quot;: &quot;How mnay yards is a football field&quot;, &quot;Answer&quot;: &quot;120 yards&quot;, }) question.append({ &quot;Question&quot;: &quot;How many yards is the endzone&quot;, &quot;Answer&quot;: &quot;10 yards&quot;, }) question.append({ &quot;Question&quot;: &quot;How many yards is a first down penalty&quot;, &quot;Answer&quot;: &quot;10 yards&quot;, }) question.append({ &quot;Question&quot;: &quot;how many players is on the offense&quot;, &quot;Answer&quot;: &quot;11 players&quot;, }) points = 0 print(&quot;Take this quiz about football rules.&quot;) for i in question: # for loop repeats every time an answer is given print(i[&quot;Question&quot;]) response = input(i[&quot;Question&quot;]) print(response) if response == i[&quot;Answer&quot;]: points += 1 print(&quot;Correct, you have &quot;, points, &quot; points!&quot;) else: print(&quot;Incorrect, the answer was; &quot;, i[&quot;Answer&quot;]) print(&quot;You have finished the quiz with &quot;, points, &quot; out of &quot;, len(question), &quot; points!&quot;) . Take this quiz about football rules. How mnay yards is a football field 120 yards Correct, you have 1 points! How many yards is the endzone 10 yards Correct, you have 2 points! How many yards is a first down penalty 5 yards Incorrect, the answer was; 10 yards how many players is on the offense 11 Incorrect, the answer was; 11 players You have finished the quiz with 2 out of 4 points! .",
            "url": "https://eligilmour.github.io/Eli-1/2022/09/05/listanddictionary.html",
            "relUrl": "/2022/09/05/listanddictionary.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "HTML Fragments ( changing theme )",
            "content": "Here is the results . . Postitve effects . The positive effects of changing the theme was that I learned that fastpages has different versions of how you can create and make your website look. . Negative effects . the negative effects of changing the theme was that It switched everything around and pushed it all the way to the left side of the screen and you can’t use the top tabs that include about me, search, vocab, the table, and catergories which makes the theme not beneficial. .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/markdown/2022/09/05/changing-theme.html",
            "relUrl": "/fastpages/markdown/2022/09/05/changing-theme.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Tool check",
            "content": "echo &quot;version check&quot; python --version python2 --version python3 --version . version check Python 3.9.12 Python 2.7.18 Python 3.9.12 . echo &quot;check conda packages&quot; conda list . check conda packages # packages in environment at /home/eli/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.5 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/eli/.local/share/jupyter/kernels/bash javascript /home/eli/.local/share/jupyter/kernels/javascript python3 /home/eli/.local/share/jupyter/kernels/python3 . echo &quot;jupyter check&quot; test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . jupyter check python3 /home/eli/.local/share/jupyter/kernels/python3 .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/juypter/2022/09/01/toolcheck.html",
            "relUrl": "/fastpages/juypter/2022/09/01/toolcheck.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "The rules of football",
            "content": "question = [&quot;how many players are on offense on the feild at a time&quot;, &quot;how many players are on defense on the feild at a time&quot;, &quot;how many yards is the length of a football feild&quot;, &quot;How many yards is the length of the endzone&quot;] answer = [&quot;11&quot;, &quot;11&quot;, &quot;120 yards&quot;, &quot;10 yards&quot;] points = 0 print(&quot;Take this quiz about football basic rules.&quot;) for i in range(len(question)): print(question[i]) response = input() print(response) if response == answer[i]: points += 1 print(&quot;Correct, you have &quot;, points, &quot; points!&quot;) else: print(&quot;Incorrect, the answer was; &quot;, answer[i]) print(&quot;You have finished the quiz with &quot;, points, &quot; out of &quot;, len(question), &quot; points!&quot;) . Take this quiz about football basic rules. how many players are on offense on the feild at a time 11 Correct, you have 1 points! how many players are on defense on the feild at a time 10 Incorrect, the answer was; 11 how many yards is the length of a football feild 120 yards Correct, you have 2 points! How many yards is the length of the endzone 10 Incorrect, the answer was; 10 yards You have finished the quiz with 2 out of 4 points! .",
            "url": "https://eligilmour.github.io/Eli-1/2022/08/26/notebookquiz.html",
            "relUrl": "/2022/08/26/notebookquiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Bash Notebook",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscodex # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/eli/vscodex exists. Directory /home/eli/vscodex/APCSP exists. .",
            "url": "https://eligilmour.github.io/Eli-1/fastpages/juypter/2022/08/26/bashkernal.html",
            "relUrl": "/fastpages/juypter/2022/08/26/bashkernal.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "First Notebook",
            "content": "abcdefg .",
            "url": "https://eligilmour.github.io/Eli-1/2022/08/22/notebook.html",
            "relUrl": "/2022/08/22/notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Markdown",
            "content": "Age of football . what makes football so special . Football is the greatest sport ever in extist and many people around the world watch american football around the world. Football is played at many age levels ranging form young teens to adults playing in front of millions of people. . list Print(&quot;Hello World&quot;) . | .",
            "url": "https://eligilmour.github.io/Eli-1/2022/08/22/Markdown.html",
            "relUrl": "/2022/08/22/Markdown.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Sign Minus . +1 | 00000000 | 0 | 0 | 0 | = | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://eligilmour.github.io/Eli-1/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "This site is built with fastpages . . Hello everyone My name is Eli Gilmour and I am here to share a little bit of information as to who I am. I was born and raised in San Diego and i am 16 years old. For my whole life I have played baseball and have been on many different travel clubs and as of two years ago I made the switch to football, which I currently play for del norte. I love to play video games, cook, and hang out with friends. .",
          "url": "https://eligilmour.github.io/Eli-1/about/Eli%20Gilmour",
          "relUrl": "/about/Eli Gilmour",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "Vocab",
          "content": "Vocab list . Input: Data going into to the code Output: Data coming out of the code Sequence: two or more lines . Fastpages . An open source blogging tool with support for Jupyter notebook, markdown, and docs . File Types . .md: used to create web pages .ipynb: jupyter notebook uses python and .md in conjunction .html: similar to .md files, however, .html is more difficult to use but allows for more effects than .md .",
          "url": "https://eligilmour.github.io/Eli-1/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Frontend",
          "content": "| Overview | Javascript tutorial | API Stocks | td&gt; . &lt;/table",
          "url": "https://eligilmour.github.io/Eli-1/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Weekly work",
          "content": "Week Projects . 0 | My first jupyter notebook,—&gt; My First Markdown. | . 1 | Football quiz,—&gt; key tools check. | . 2 | changing a theme,—&gt; lists, Dictionaries, Iteration. | . 3 | Making quiz using app lab. | . 4 | collaboration Notes,—&gt;Psychology of Happiness. | . 5 | Javascript,—&gt; Final project plan | . 6 | college board quiz,—&gt; | . 7 | Stock Final Project plan,—&gt;Identifying and Correcting Errors Quiz | . 7 | Burger,Fries,Drink code Block Fix,—&gt; | .",
          "url": "https://eligilmour.github.io/Eli-1/WeeklyWork/",
          "relUrl": "/WeeklyWork/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://eligilmour.github.io/Eli-1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}